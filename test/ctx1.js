
module.exports = {
  "dpd" : { "assets" : {  },
      "email" : {  },
      "roles" : {  },
      "users" : {  }
    },
  "level" : "info",
  "message" : "",
  "method" : "GET",
  "query" : {  },
  "req" : { "_endEmitted" : true,
      "_events" : null,
      "_maxListeners" : 10,
      "_paused" : false,
      "_pendings" : [  ],
      "_routed" : true,
      "client" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" },
      "complete" : true,
      "connection" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" },
      "cookies" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"cookies\"]" },
      "domain" : { "_events" : {  },
          "_maxListeners" : 10,
          "domain" : null,
          "members" : [ { "$ref" : "$[\"req\"]" },
              { "_events" : {  },
                "_hasBody" : true,
                "_headerNames" : { "set-cookie" : "set-cookie" },
                "_headers" : { "set-cookie" : [ "sid=73488724a144623c6a8584defcf2da7258d8295785031689188f0c86d36da6fcdcc034166934efa2f12850b8890c1d47ee66d0710352d5a6a17ffc8e16fc49a2; path=/; httponly" ] },
                "_last" : false,
                "_maxListeners" : 10,
                "_trailer" : "",
                "chunkedEncoding" : false,
                "connection" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" },
                "cookies" : { "request" : { "$ref" : "$[\"req\"]" },
                    "response" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1]" }
                  },
                "domain" : { "$ref" : "$[\"req\"][\"domain\"]" },
                "finished" : false,
                "output" : [  ],
                "outputEncodings" : [  ],
                "sendDate" : true,
                "shouldKeepAlive" : true,
                "socket" : { "_bytesDispatched" : 0,
                    "_connectQueueSize" : 0,
                    "_events" : { "close" : [ null,
                            null
                          ] },
                    "_flags" : 0,
                    "_handle" : { "owner" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" },
                        "writeQueueSize" : 0
                      },
                    "_httpMessage" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1]" },
                    "_idleNext" : { "_idleNext" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" },
                        "_idlePrev" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" }
                      },
                    "_idlePrev" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"_idleNext\"]" },
                    "_idleStart" : "2013-07-14T22:21:57.707Z",
                    "_idleTimeout" : 120000,
                    "_maxListeners" : 10,
                    "_paused" : false,
                    "_pendingWriteReqs" : 0,
                    "allowHalfOpen" : true,
                    "bytesRead" : 1011,
                    "destroyed" : false,
                    "domain" : null,
                    "errorEmitted" : false,
                    "parser" : { "_headers" : [  ],
                        "_url" : "",
                        "incoming" : { "$ref" : "$[\"req\"]" },
                        "maxHeaderPairs" : 2000,
                        "socket" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" }
                      },
                    "readable" : true,
                    "server" : { "__resourceCache" : null,
                        "_connectionKey" : "4:0.0.0.0:2403",
                        "_connections" : 1,
                        "_events" : { "error" : [ null,
                                null
                              ],
                            "listening" : [ null ],
                            "request" : [ null,
                                null
                              ]
                          },
                        "_handle" : { "owner" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" },
                            "writeQueueSize" : 0
                          },
                        "_maxListeners" : 10,
                        "allowHalfOpen" : true,
                        "connections" : 1,
                        "db" : { "_mdb" : { "_applicationClosed" : false,
                                "_callBackStore" : { "_events" : {  },
                                    "_maxListeners" : 10,
                                    "_notReplied" : {  },
                                    "domain" : null
                                  },
                                "_events" : null,
                                "_lastReaperTimestamp" : 1373840515542,
                                "_maxListeners" : 10,
                                "_state" : "connected",
                                "auths" : [  ],
                                "bson" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"connectionPool\"][\"bson\"]" },
                                "bsonLib" : {  },
                                "bson_deserializer" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"bsonLib\"]" },
                                "bson_serializer" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"bsonLib\"]" },
                                "commands" : [  ],
                                "databaseName" : "-deployd",
                                "domain" : null,
                                "eventHandlers" : { "close" : [  ],
                                    "error" : [  ],
                                    "message" : [  ],
                                    "parseError" : [  ],
                                    "poolReady" : [  ]
                                  },
                                "forceServerObjectId" : false,
                                "isInitializing" : true,
                                "logger" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"logger\"]" },
                                "notReplied" : {  },
                                "numberOfRetries" : 5,
                                "openCalled" : true,
                                "options" : {  },
                                "raw" : false,
                                "reaperEnabled" : false,
                                "reaperInterval" : 10000,
                                "reaperTimeout" : 30000,
                                "recordQueryStats" : false,
                                "retryMiliSeconds" : 5000,
                                "serializeFunctions" : false,
                                "serverConfig" : { "_events" : null,
                                    "_maxListeners" : 10,
                                    "_readPreference" : null,
                                    "_serverState" : "connected",
                                    "_state" : { "runtimeStats" : { "queryStats" : { "m_n" : 0,
                                                "m_newM" : 0,
                                                "m_newS" : 0,
                                                "m_oldM" : 0,
                                                "m_oldS" : 0,
                                                "mean" : 0,
                                                "numDataValues" : 0,
                                                "sScore" : 0,
                                                "standardDeviation" : 0,
                                                "variance" : 0
                                              } } },
                                    "_used" : true,
                                    "connected" : true,
                                    "connectionPool" : { "_events" : { "poolReady" : [ null ] },
                                        "_maxListeners" : 10,
                                        "_poolState" : "connected",
                                        "_timeout" : false,
                                        "bson" : {  },
                                        "connectionId" : 1,
                                        "currentConnectionIndex" : 2,
                                        "domain" : { "_events" : {  },
                                            "_maxListeners" : 10,
                                            "domain" : null,
                                            "members" : [  ]
                                          },
                                        "logger" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"logger\"]" },
                                        "minPoolSize" : 1,
                                        "openConnections" : [ { "_events" : {  },
                                              "_maxListeners" : 10,
                                              "buffer" : null,
                                              "bytesRead" : 0,
                                              "connected" : true,
                                              "connection" : { "_bytesDispatched" : 250,
                                                  "_connectQueueSize" : 0,
                                                  "_connecting" : false,
                                                  "_events" : {  },
                                                  "_flags" : 0,
                                                  "_handle" : { "owner" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"connectionPool\"][\"openConnections\"][0][\"connection\"]" },
                                                      "writeQueueSize" : 0
                                                    },
                                                  "_idleNext" : null,
                                                  "_idlePrev" : null,
                                                  "_idleTimeout" : -1,
                                                  "_maxListeners" : 10,
                                                  "_pendingWriteReqs" : 0,
                                                  "bytesRead" : 285,
                                                  "destroyed" : false,
                                                  "domain" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"connectionPool\"][\"domain\"]" },
                                                  "errorEmitted" : false,
                                                  "readable" : true,
                                                  "writable" : true
                                                },
                                              "domain" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"connectionPool\"][\"domain\"]" },
                                              "eventHandlers" : { "close" : [  ],
                                                  "connect" : [  ],
                                                  "end" : [  ],
                                                  "error" : [  ],
                                                  "message" : [  ],
                                                  "parseError" : [  ],
                                                  "timeout" : [  ]
                                                },
                                              "id" : 0,
                                              "logger" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"logger\"]" },
                                              "maxBsonSize" : 16777216,
                                              "sizeOfMessage" : 0,
                                              "socketOptions" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"socketOptions\"]" },
                                              "stubBuffer" : null,
                                              "writeSteam" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"connectionPool\"][\"openConnections\"][0][\"connection\"]" }
                                            } ],
                                        "poolSize" : 1,
                                        "socketOptions" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"][\"serverConfig\"][\"socketOptions\"]" }
                                      },
                                    "dbInstance" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"]" },
                                    "dbInstances" : [ { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"][\"_mdb\"]" } ],
                                    "domain" : null,
                                    "eventHandlers" : { "close" : [  ],
                                        "error" : [  ],
                                        "message" : [  ],
                                        "parseError" : [  ],
                                        "poolReady" : [  ],
                                        "timeout" : [  ]
                                      },
                                    "host" : "127.0.0.1",
                                    "internalMaster" : true,
                                    "isMasterDoc" : { "ismaster" : true,
                                        "localTime" : "2013-07-14T22:21:57.711Z",
                                        "maxBsonObjectSize" : 16777216,
                                        "ok" : 1
                                      },
                                    "logger" : {  },
                                    "options" : {  },
                                    "poolSize" : 1,
                                    "port" : 6117,
                                    "recordQueryStats" : false,
                                    "socketOptions" : { "bufferSize" : 0,
                                        "encoding" : null,
                                        "host" : "127.0.0.1",
                                        "keepAlive" : 0,
                                        "noDelay" : true,
                                        "port" : 6117,
                                        "timeout" : 0
                                      },
                                    "ssl" : false
                                  },
                                "slaveOk" : false,
                                "strict" : false,
                                "tag" : 1373840515542
                              },
                            "connected" : true,
                            "connecting" : false,
                            "options" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"options\"][\"db\"]" }
                          },
                        "domain" : null,
                        "httpAllowHalfOpen" : false,
                        "keys" : { "path" : ".dpd/keys.json" },
                        "options" : { "db" : { "host" : "127.0.0.1",
                                "name" : "-deployd",
                                "port" : 6117
                              },
                            "env" : "development",
                            "port" : 2403
                          },
                        "resources" : [ { "_events" : null,
                              "_maxListeners" : 10,
                              "config" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][0][\"options\"][\"config\"]" },
                              "domain" : { "_events" : {  },
                                  "_maxListeners" : 10,
                                  "domain" : null,
                                  "members" : [  ]
                                },
                              "environment" : { "__assets__" : {  },
                                  "__digestAlgorithm__" : "md5",
                                  "__version__" : ""
                                },
                              "events" : {  },
                              "name" : "assets",
                              "options" : { "config" : { "host" : "asdf",
                                      "type" : "AssetPipeline"
                                    },
                                  "configPath" : "resources\\assets",
                                  "db" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"]" },
                                  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                                },
                              "path" : "/assets"
                            },
                            { "_events" : null,
                              "_maxListeners" : 10,
                              "config" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][1][\"options\"][\"config\"]" },
                              "domain" : { "_events" : {  },
                                  "_maxListeners" : 10,
                                  "domain" : null,
                                  "members" : [  ]
                                },
                              "events" : {  },
                              "name" : "email",
                              "options" : { "config" : { "defaultFromAddress" : "no-reply@demo.season3media.com",
                                      "defaultTemplate" : "no-reply@demo.season3media.com",
                                      "host" : "box823.bluehost.com",
                                      "internalOnly" : false,
                                      "password" : "eJH}Di7B&GXf",
                                      "port" : "465",
                                      "productionOnly" : true,
                                      "ssl" : true,
                                      "type" : "Email",
                                      "username" : "no-reply@demo.season3media.com"
                                    },
                                  "configPath" : "resources\\email",
                                  "db" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"]" },
                                  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                                },
                              "path" : "/email",
                              "transport" : { "dkimOptions" : false,
                                  "options" : { "auth" : { "pass" : "eJH}Di7B&GXf",
                                          "user" : "no-reply@demo.season3media.com"
                                        },
                                      "host" : "box823.bluehost.com",
                                      "maxConnections" : 5,
                                      "port" : 465,
                                      "secureConnection" : true
                                    },
                                  "transport" : { "options" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][1][\"transport\"][\"options\"]" },
                                      "pool" : { "_connectionsAvailable" : [  ],
                                          "_connectionsInUse" : [  ],
                                          "_events" : null,
                                          "_idgen" : 0,
                                          "_maxListeners" : 10,
                                          "_messageQueue" : [  ],
                                          "domain" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][1][\"domain\"]" },
                                          "host" : "box823.bluehost.com",
                                          "options" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][1][\"transport\"][\"options\"]" },
                                          "port" : 465
                                        }
                                    },
                                  "transportType" : "SMTP"
                                }
                            },
                            { "_events" : null,
                              "_maxListeners" : 10,
                              "config" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][2][\"options\"][\"config\"]" },
                              "domain" : { "_events" : {  },
                                  "_maxListeners" : 10,
                                  "domain" : null,
                                  "members" : [  ]
                                },
                              "events" : {  },
                              "external" : {  },
                              "name" : "roles",
                              "options" : { "config" : { "properties" : { "name" : { "id" : "name",
                                              "name" : "name",
                                              "order" : 0,
                                              "required" : true,
                                              "type" : "string",
                                              "typeLabel" : "string"
                                            } },
                                      "type" : "Collection"
                                    },
                                  "configPath" : "resources\\roles",
                                  "db" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"]" },
                                  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                                },
                              "path" : "/roles",
                              "properties" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][2][\"options\"][\"config\"][\"properties\"]" },
                              "store" : { "_db" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"]" },
                                  "namespace" : "roles"
                                }
                            },
                            { "_events" : null,
                              "_maxListeners" : 10,
                              "config" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][3][\"options\"][\"config\"]" },
                              "domain" : { "_events" : {  },
                                  "_maxListeners" : 10,
                                  "domain" : null,
                                  "members" : [  ]
                                },
                              "events" : {  },
                              "name" : "users",
                              "options" : { "config" : { "type" : "UserCollection" },
                                  "configPath" : "resources\\users",
                                  "db" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"]" },
                                  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                                },
                              "path" : "/users",
                              "properties" : { "password" : { "required" : true,
                                      "type" : "string"
                                    },
                                  "username" : { "required" : true,
                                      "type" : "string"
                                    }
                                },
                              "store" : { "_db" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"]" },
                                  "namespace" : "users"
                                }
                            },
                            { "_events" : null,
                              "_maxListeners" : 10,
                              "config" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][4][\"options\"][\"config\"]" },
                              "domain" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][3][\"domain\"]" },
                              "events" : {  },
                              "name" : "",
                              "options" : { "config" : { "public" : "./public" },
                                  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                                },
                              "path" : "/",
                              "public" : "./public"
                            },
                            { "_events" : null,
                              "_maxListeners" : 10,
                              "clientLib" : "/*! Socket.IO.js build:0.9.6, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed *//**\r\n * socket.io\r\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\r\n * MIT Licensed\r\n */(function(a,b){var c=a;c.version=\"0.9.6\",c.protocol=1,c.transports=[],c.j=[],c.sockets={},c.connect=function(a,d){var e=c.util.parseUri(a),f,g;b&&b.location&&(e.protocol=e.protocol||b.location.protocol.slice(0,-1),e.host=e.host||(b.document?b.document.domain:b.location.hostname),e.port=e.port||b.location.port),f=c.util.uniqueUri(e);var h={host:e.host,secure:\"https\"==e.protocol,port:e.port||(\"https\"==e.protocol?443:80),query:e.query||\"\"};c.util.merge(h,d);if(h[\"force new connection\"]||!c.sockets[f])g=new c.Socket(h);return!h[\"force new connection\"]&&g&&(c.sockets[f]=g),g=g||c.sockets[f],g.of(e.path.length>1?e.path:\"\")}})(\"object\"==typeof module?module.exports:this.io={},this),function(a,b){var c=a.util={},d=/^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,e=[\"source\",\"protocol\",\"authority\",\"userInfo\",\"user\",\"password\",\"host\",\"port\",\"relative\",\"path\",\"directory\",\"file\",\"query\",\"anchor\"];c.parseUri=function(a){var b=d.exec(a||\"\"),c={},f=14;while(f--)c[e[f]]=b[f]||\"\";return c},c.uniqueUri=function(a){var c=a.protocol,d=a.host,e=a.port;return\"document\"in b?(d=d||document.domain,e=e||(c==\"https\"&&document.location.protocol!==\"https:\"?443:document.location.port)):(d=d||\"localhost\",!e&&c==\"https\"&&(e=443)),(c||\"http\")+\"://\"+d+\":\"+(e||80)},c.query=function(a,b){var d=c.chunkQuery(a||\"\"),e=[];c.merge(d,c.chunkQuery(b||\"\"));for(var f in d)d.hasOwnProperty(f)&&e.push(f+\"=\"+d[f]);return e.length?\"?\"+e.join(\"&\"):\"\"},c.chunkQuery=function(a){var b={},c=a.split(\"&\"),d=0,e=c.length,f;for(;d<e;++d)f=c[d].split(\"=\"),f[0]&&(b[f[0]]=f[1]);return b};var f=!1;c.load=function(a){if(\"document\"in b&&document.readyState===\"complete\"||f)return a();c.on(b,\"load\",a,!1)},c.on=function(a,b,c,d){a.attachEvent?a.attachEvent(\"on\"+b,c):a.addEventListener&&a.addEventListener(b,c,d)},c.request=function(a){if(a&&\"undefined\"!=typeof XDomainRequest)return new XDomainRequest;if(\"undefined\"!=typeof XMLHttpRequest&&(!a||c.ua.hasCORS))return new XMLHttpRequest;if(!a)try{return new(window[[\"Active\"].concat(\"Object\").join(\"X\")])(\"Microsoft.XMLHTTP\")}catch(b){}return null},\"undefined\"!=typeof window&&c.load(function(){f=!0}),c.defer=function(a){if(!c.ua.webkit||\"undefined\"!=typeof importScripts)return a();c.load(function(){setTimeout(a,100)})},c.merge=function(b,d,e,f){var g=f||[],h=typeof e==\"undefined\"?2:e,i;for(i in d)d.hasOwnProperty(i)&&c.indexOf(g,i)<0&&(typeof b[i]!=\"object\"||!h?(b[i]=d[i],g.push(d[i])):c.merge(b[i],d[i],h-1,g));return b},c.mixin=function(a,b){c.merge(a.prototype,b.prototype)},c.inherit=function(a,b){function c(){}c.prototype=b.prototype,a.prototype=new c},c.isArray=Array.isArray||function(a){return Object.prototype.toString.call(a)===\"[object Array]\"},c.intersect=function(a,b){var d=[],e=a.length>b.length?a:b,f=a.length>b.length?b:a;for(var g=0,h=f.length;g<h;g++)~c.indexOf(e,f[g])&&d.push(f[g]);return d},c.indexOf=function(a,b,c){for(var d=a.length,c=c<0?c+d<0?0:c+d:c||0;c<d&&a[c]!==b;c++);return d<=c?-1:c},c.toArray=function(a){var b=[];for(var c=0,d=a.length;c<d;c++)b.push(a[c]);return b},c.ua={},c.ua.hasCORS=\"undefined\"!=typeof XMLHttpRequest&&function(){try{var a=new XMLHttpRequest}catch(b){return!1}return a.withCredentials!=undefined}(),c.ua.webkit=\"undefined\"!=typeof navigator&&/webkit/i.test(navigator.userAgent)}(\"undefined\"!=typeof io?io:module.exports,this),function(a,b){function c(){}a.EventEmitter=c,c.prototype.on=function(a,c){return this.$events||(this.$events={}),this.$events[a]?b.util.isArray(this.$events[a])?this.$events[a].push(c):this.$events[a]=[this.$events[a],c]:this.$events[a]=c,this},c.prototype.addListener=c.prototype.on,c.prototype.once=function(a,b){function d(){c.removeListener(a,d),b.apply(this,arguments)}var c=this;return d.listener=b,this.on(a,d),this},c.prototype.removeListener=function(a,c){if(this.$events&&this.$events[a]){var d=this.$events[a];if(b.util.isArray(d)){var e=-1;for(var f=0,g=d.length;f<g;f++)if(d[f]===c||d[f].listener&&d[f].listener===c){e=f;break}if(e<0)return this;d.splice(e,1),d.length||delete this.$events[a]}else(d===c||d.listener&&d.listener===c)&&delete this.$events[a]}return this},c.prototype.removeAllListeners=function(a){return this.$events&&this.$events[a]&&(this.$events[a]=null),this},c.prototype.listeners=function(a){return this.$events||(this.$events={}),this.$events[a]||(this.$events[a]=[]),b.util.isArray(this.$events[a])||(this.$events[a]=[this.$events[a]]),this.$events[a]},c.prototype.emit=function(a){if(!this.$events)return!1;var c=this.$events[a];if(!c)return!1;var d=Array.prototype.slice.call(arguments,1);if(\"function\"==typeof c)c.apply(this,d);else{if(!b.util.isArray(c))return!1;var e=c.slice();for(var f=0,g=e.length;f<g;f++)e[f].apply(this,d)}return!0}}(\"undefined\"!=typeof io?io:module.exports,\"undefined\"!=typeof io?io:module.parent.exports),function(exports,nativeJSON){function f(a){return a<10?\"0\"+a:a}function date(a,b){return isFinite(a.valueOf())?a.getUTCFullYear()+\"-\"+f(a.getUTCMonth()+1)+\"-\"+f(a.getUTCDate())+\"T\"+f(a.getUTCHours())+\":\"+f(a.getUTCMinutes())+\":\"+f(a.getUTCSeconds())+\"Z\":null}function quote(a){return escapable.lastIndex=0,escapable.test(a)?'\"'+a.replace(escapable,function(a){var b=meta[a];return typeof b==\"string\"?b:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+a+'\"'}function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i instanceof Date&&(i=date(a)),typeof rep==\"function\"&&(i=rep.call(b,a,i));switch(typeof i){case\"string\":return quote(i);case\"number\":return isFinite(i)?String(i):\"null\";case\"boolean\":case\"null\":return String(i);case\"object\":if(!i)return\"null\";gap+=indent,h=[];if(Object.prototype.toString.apply(i)===\"[object Array]\"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||\"null\";return e=h.length===0?\"[]\":gap?\"[\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"]\":\"[\"+h.join(\",\")+\"]\",gap=g,e}if(rep&&typeof rep==\"object\"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]==\"string\"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e));return e=h.length===0?\"{}\":gap?\"{\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"}\":\"{\"+h.join(\",\")+\"}\",gap=g,e}}\"use strict\";if(nativeJSON&&nativeJSON.parse)return exports.JSON={parse:nativeJSON.parse,stringify:nativeJSON.stringify};var JSON=exports.JSON={},cx=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,escapable=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,gap,indent,meta={\"\\b\":\"\\\\b\",\"\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},rep;JSON.stringify=function(a,b,c){var d;gap=\"\",indent=\"\";if(typeof c==\"number\")for(d=0;d<c;d+=1)indent+=\" \";else typeof c==\"string\"&&(indent=c);rep=b;if(!b||typeof b==\"function\"||typeof b==\"object\"&&typeof b.length==\"number\")return str(\"\",{\"\":a});throw new Error(\"JSON.stringify\")},JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e==\"object\")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\\],:{}\\s]*$/.test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\")))return j=eval(\"(\"+text+\")\"),typeof reviver==\"function\"?walk({\"\":j},\"\"):j;throw new SyntaxError(\"JSON.parse\")}}(\"undefined\"!=typeof io?io:module.exports,typeof JSON!=\"undefined\"?JSON:undefined),function(a,b){var c=a.parser={},d=c.packets=[\"disconnect\",\"connect\",\"heartbeat\",\"message\",\"json\",\"event\",\"ack\",\"error\",\"noop\"],e=c.reasons=[\"transport not supported\",\"client not handshaken\",\"unauthorized\"],f=c.advice=[\"reconnect\"],g=b.JSON,h=b.util.indexOf;c.encodePacket=function(a){var b=h(d,a.type),c=a.id||\"\",i=a.endpoint||\"\",j=a.ack,k=null;switch(a.type){case\"error\":var l=a.reason?h(e,a.reason):\"\",m=a.advice?h(f,a.advice):\"\";if(l!==\"\"||m!==\"\")k=l+(m!==\"\"?\"+\"+m:\"\");break;case\"message\":a.data!==\"\"&&(k=a.data);break;case\"event\":var n={name:a.name};a.args&&a.args.length&&(n.args=a.args),k=g.stringify(n);break;case\"json\":k=g.stringify(a.data);break;case\"connect\":a.qs&&(k=a.qs);break;case\"ack\":k=a.ackId+(a.args&&a.args.length?\"+\"+g.stringify(a.args):\"\")}var o=[b,c+(j==\"data\"?\"+\":\"\"),i];return k!==null&&k!==undefined&&o.push(k),o.join(\":\")},c.encodePayload=function(a){var b=\"\";if(a.length==1)return a[0];for(var c=0,d=a.length;c<d;c++){var e=a[c];b+=\"�\"+e.length+\"�\"+a[c]}return b};var i=/([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;c.decodePacket=function(a){var b=a.match(i);if(!b)return{};var c=b[2]||\"\",a=b[5]||\"\",h={type:d[b[1]],endpoint:b[4]||\"\"};c&&(h.id=c,b[3]?h.ack=\"data\":h.ack=!0);switch(h.type){case\"error\":var b=a.split(\"+\");h.reason=e[b[0]]||\"\",h.advice=f[b[1]]||\"\";break;case\"message\":h.data=a||\"\";break;case\"event\":try{var j=g.parse(a);h.name=j.name,h.args=j.args}catch(k){}h.args=h.args||[];break;case\"json\":try{h.data=g.parse(a)}catch(k){}break;case\"connect\":h.qs=a||\"\";break;case\"ack\":var b=a.match(/^([0-9]+)(\\+)?(.*)/);if(b){h.ackId=b[1],h.args=[];if(b[3])try{h.args=b[3]?g.parse(b[3]):[]}catch(k){}}break;case\"disconnect\":case\"heartbeat\":}return h},c.decodePayload=function(a){if(a.charAt(0)==\"�\"){var b=[];for(var d=1,e=\"\";d<a.length;d++)a.charAt(d)==\"�\"?(b.push(c.decodePacket(a.substr(d+1).substr(0,e))),d+=Number(e)+1,e=\"\"):e+=a.charAt(d);return b}return[c.decodePacket(a)]}}(\"undefined\"!=typeof io?io:module.exports,\"undefined\"!=typeof io?io:module.parent.exports),function(a,b){function c(a,b){this.socket=a,this.sessid=b}a.Transport=c,b.util.mixin(c,b.EventEmitter),c.prototype.onData=function(a){this.clearCloseTimeout(),(this.socket.connected||this.socket.connecting||this.socket.reconnecting)&&this.setCloseTimeout();if(a!==\"\"){var c=b.parser.decodePayload(a);if(c&&c.length)for(var d=0,e=c.length;d<e;d++)this.onPacket(c[d])}return this},c.prototype.onPacket=function(a){return this.socket.setHeartbeatTimeout(),a.type==\"heartbeat\"?this.onHeartbeat():(a.type==\"connect\"&&a.endpoint==\"\"&&this.onConnect(),a.type==\"error\"&&a.advice==\"reconnect\"&&(this.open=!1),this.socket.onPacket(a),this)},c.prototype.setCloseTimeout=function(){if(!this.closeTimeout){var a=this;this.closeTimeout=setTimeout(function(){a.onDisconnect()},this.socket.closeTimeout)}},c.prototype.onDisconnect=function(){return this.close&&this.open&&this.close(),this.clearTimeouts(),this.socket.onDisconnect(),this},c.prototype.onConnect=function(){return this.socket.onConnect(),this},c.prototype.clearCloseTimeout=function(){this.closeTimeout&&(clearTimeout(this.closeTimeout),this.closeTimeout=null)},c.prototype.clearTimeouts=function(){this.clearCloseTimeout(),this.reopenTimeout&&clearTimeout(this.reopenTimeout)},c.prototype.packet=function(a){this.send(b.parser.encodePacket(a))},c.prototype.onHeartbeat=function(a){this.packet({type:\"heartbeat\"})},c.prototype.onOpen=function(){this.open=!0,this.clearCloseTimeout(),this.socket.onOpen()},c.prototype.onClose=function(){var a=this;this.open=!1,this.socket.onClose(),this.onDisconnect()},c.prototype.prepareUrl=function(){var a=this.socket.options;return this.scheme()+\"://\"+a.host+\":\"+a.port+\"/\"+a.resource+\"/\"+b.protocol+\"/\"+this.name+\"/\"+this.sessid},c.prototype.ready=function(a,b){b.call(this)}}(\"undefined\"!=typeof io?io:module.exports,\"undefined\"!=typeof io?io:module.parent.exports),function(a,b,c){function d(a){this.options={port:80,secure:!1,document:\"document\"in c?document:!1,resource:\"socket.io\",transports:b.transports,\"connect timeout\":1e4,\"try multiple transports\":!0,reconnect:!0,\"reconnection delay\":500,\"reconnection limit\":Infinity,\"reopen delay\":3e3,\"max reconnection attempts\":10,\"sync disconnect on unload\":!0,\"auto connect\":!0,\"flash policy port\":10843},b.util.merge(this.options,a),this.connected=!1,this.open=!1,this.connecting=!1,this.reconnecting=!1,this.namespaces={},this.buffer=[],this.doBuffer=!1;if(this.options[\"sync disconnect on unload\"]&&(!this.isXDomain()||b.util.ua.hasCORS)){var d=this;b.util.on(c,\"unload\",function(){d.disconnectSync()},!1)}this.options[\"auto connect\"]&&this.connect()}function e(){}a.Socket=d,b.util.mixin(d,b.EventEmitter),d.prototype.of=function(a){return this.namespaces[a]||(this.namespaces[a]=new b.SocketNamespace(this,a),a!==\"\"&&this.namespaces[a].packet({type:\"connect\"})),this.namespaces[a]},d.prototype.publish=function(){this.emit.apply(this,arguments);var a;for(var b in this.namespaces)this.namespaces.hasOwnProperty(b)&&(a=this.of(b),a.$emit.apply(a,arguments))},d.prototype.handshake=function(a){function f(b){b instanceof Error?c.onError(b.message):a.apply(null,b.split(\":\"))}var c=this,d=this.options,g=[\"http\"+(d.secure?\"s\":\"\")+\":/\",d.host+\":\"+d.port,d.resource,b.protocol,b.util.query(this.options.query,\"t=\"+ +(new Date))].join(\"/\");if(this.isXDomain()&&!b.util.ua.hasCORS){var h=document.getElementsByTagName(\"script\")[0],i=document.createElement(\"script\");i.src=g+\"&jsonp=\"+b.j.length,h.parentNode.insertBefore(i,h),b.j.push(function(a){f(a),i.parentNode.removeChild(i)})}else{var j=b.util.request();j.open(\"GET\",g,!0),j.withCredentials=!0,j.onreadystatechange=function(){j.readyState==4&&(j.onreadystatechange=e,j.status==200?f(j.responseText):!c.reconnecting&&c.onError(j.responseText))},j.send(null)}},d.prototype.getTransport=function(a){var c=a||this.transports,d;for(var e=0,f;f=c[e];e++)if(b.Transport[f]&&b.Transport[f].check(this)&&(!this.isXDomain()||b.Transport[f].xdomainCheck()))return new b.Transport[f](this,this.sessionid);return null},d.prototype.connect=function(a){if(this.connecting)return this;var c=this;return this.handshake(function(d,e,f,g){function h(a){c.transport&&c.transport.clearTimeouts(),c.transport=c.getTransport(a);if(!c.transport)return c.publish(\"connect_failed\");c.transport.ready(c,function(){c.connecting=!0,c.publish(\"connecting\",c.transport.name),c.transport.open(),c.options[\"connect timeout\"]&&(c.connectTimeoutTimer=setTimeout(function(){if(!c.connected){c.connecting=!1;if(c.options[\"try multiple transports\"]){c.remainingTransports||(c.remainingTransports=c.transports.slice(0));var a=c.remainingTransports;while(a.length>0&&a.splice(0,1)[0]!=c.transport.name);a.length?h(a):c.publish(\"connect_failed\")}}},c.options[\"connect timeout\"]))})}c.sessionid=d,c.closeTimeout=f*1e3,c.heartbeatTimeout=e*1e3,c.transports=g?b.util.intersect(g.split(\",\"),c.options.transports):c.options.transports,c.setHeartbeatTimeout(),h(c.transports),c.once(\"connect\",function(){clearTimeout(c.connectTimeoutTimer),a&&typeof a==\"function\"&&a()})}),this},d.prototype.setHeartbeatTimeout=function(){clearTimeout(this.heartbeatTimeoutTimer);var a=this;this.heartbeatTimeoutTimer=setTimeout(function(){a.transport.onClose()},this.heartbeatTimeout)},d.prototype.packet=function(a){return this.connected&&!this.doBuffer?this.transport.packet(a):this.buffer.push(a),this},d.prototype.setBuffer=function(a){this.doBuffer=a,!a&&this.connected&&this.buffer.length&&(this.transport.payload(this.buffer),this.buffer=[])},d.prototype.disconnect=function(){if(this.connected||this.connecting)this.open&&this.of(\"\").packet({type:\"disconnect\"}),this.onDisconnect(\"booted\");return this},d.prototype.disconnectSync=function(){var a=b.util.request(),c=this.resource+\"/\"+b.protocol+\"/\"+this.sessionid;a.open(\"GET\",c,!0),this.onDisconnect(\"booted\")},d.prototype.isXDomain=function(){var a=c.location.port||(\"https:\"==c.location.protocol?443:80);return this.options.host!==c.location.hostname||this.options.port!=a},d.prototype.onConnect=function(){this.connected||(this.connected=!0,this.connecting=!1,this.doBuffer||this.setBuffer(!1),this.emit(\"connect\"))},d.prototype.onOpen=function(){this.open=!0},d.prototype.onClose=function(){this.open=!1,clearTimeout(this.heartbeatTimeoutTimer)},d.prototype.onPacket=function(a){this.of(a.endpoint).onPacket(a)},d.prototype.onError=function(a){a&&a.advice&&a.advice===\"reconnect\"&&(this.connected||this.connecting)&&(this.disconnect(),this.options.reconnect&&this.reconnect()),this.publish(\"error\",a&&a.reason?a.reason:a)},d.prototype.onDisconnect=function(a){var b=this.connected,c=this.connecting;this.connected=!1,this.connecting=!1,this.open=!1;if(b||c)this.transport.close(),this.transport.clearTimeouts(),b&&(this.publish(\"disconnect\",a),\"booted\"!=a&&this.options.reconnect&&!this.reconnecting&&this.reconnect())},d.prototype.reconnect=function(){function e(){if(a.connected){for(var b in a.namespaces)a.namespaces.hasOwnProperty(b)&&\"\"!==b&&a.namespaces[b].packet({type:\"connect\"});a.publish(\"reconnect\",a.transport.name,a.reconnectionAttempts)}clearTimeout(a.reconnectionTimer),a.removeListener(\"connect_failed\",f),a.removeListener(\"connect\",f),a.reconnecting=!1,delete a.reconnectionAttempts,delete a.reconnectionDelay,delete a.reconnectionTimer,delete a.redoTransports,a.options[\"try multiple transports\"]=c}function f(){if(!a.reconnecting)return;if(a.connected)return e();if(a.connecting&&a.reconnecting)return a.reconnectionTimer=setTimeout(f,1e3);a.reconnectionAttempts++>=b?a.redoTransports?(a.publish(\"reconnect_failed\"),e()):(a.on(\"connect_failed\",f),a.options[\"try multiple transports\"]=!0,a.transport=a.getTransport(),a.redoTransports=!0,a.connect()):(a.reconnectionDelay<d&&(a.reconnectionDelay*=2),a.connect(),a.publish(\"reconnecting\",a.reconnectionDelay,a.reconnectionAttempts),a.reconnectionTimer=setTimeout(f,a.reconnectionDelay))}this.reconnecting=!0,this.reconnectionAttempts=0,this.reconnectionDelay=this.options[\"reconnection delay\"];var a=this,b=this.options[\"max reconnection attempts\"],c=this.options[\"try multiple transports\"],d=this.options[\"reconnection limit\"];this.options[\"try multiple transports\"]=!1,this.reconnectionTimer=setTimeout(f,this.reconnectionDelay),this.on(\"connect\",f)}}(\"undefined\"!=typeof io?io:module.exports,\"undefined\"!=typeof io?io:module.parent.exports,this),function(a,b){function c(a,b){this.socket=a,this.name=b||\"\",this.flags={},this.json=new d(this,\"json\"),this.ackPackets=0,this.acks={}}function d(a,b){this.namespace=a,this.name=b}a.SocketNamespace=c,b.util.mixin(c,b.EventEmitter),c.prototype.$emit=b.EventEmitter.prototype.emit,c.prototype.of=function(){return this.socket.of.apply(this.socket,arguments)},c.prototype.packet=function(a){return a.endpoint=this.name,this.socket.packet(a),this.flags={},this},c.prototype.send=function(a,b){var c={type:this.flags.json?\"json\":\"message\",data:a};return\"function\"==typeof b&&(c.id=++this.ackPackets,c.ack=!0,this.acks[c.id]=b),this.packet(c)},c.prototype.emit=function(a){var b=Array.prototype.slice.call(arguments,1),c=b[b.length-1],d={type:\"event\",name:a};return\"function\"==typeof c&&(d.id=++this.ackPackets,d.ack=\"data\",this.acks[d.id]=c,b=b.slice(0,b.length-1)),d.args=b,this.packet(d)},c.prototype.disconnect=function(){return this.name===\"\"?this.socket.disconnect():(this.packet({type:\"disconnect\"}),this.$emit(\"disconnect\")),this},c.prototype.onPacket=function(a){function d(){c.packet({type:\"ack\",args:b.util.toArray(arguments),ackId:a.id})}var c=this;switch(a.type){case\"connect\":this.$emit(\"connect\");break;case\"disconnect\":this.name===\"\"?this.socket.onDisconnect(a.reason||\"booted\"):this.$emit(\"disconnect\",a.reason);break;case\"message\":case\"json\":var e=[\"message\",a.data];a.ack==\"data\"?e.push(d):a.ack&&this.packet({type:\"ack\",ackId:a.id}),this.$emit.apply(this,e);break;case\"event\":var e=[a.name].concat(a.args);a.ack==\"data\"&&e.push(d),this.$emit.apply(this,e);break;case\"ack\":this.acks[a.ackId]&&(this.acks[a.ackId].apply(this,a.args),delete this.acks[a.ackId]);break;case\"error\":a.advice?this.socket.onError(a):a.reason==\"unauthorized\"?this.$emit(\"connect_failed\",a.reason):this.$emit(\"error\",a.reason)}},d.prototype.send=function(){this.namespace.flags[this.name]=!0,this.namespace.send.apply(this.namespace,arguments)},d.prototype.emit=function(){this.namespace.flags[this.name]=!0,this.namespace.emit.apply(this.namespace,arguments)}}(\"undefined\"!=typeof io?io:module.exports,\"undefined\"!=typeof io?io:module.parent.exports),function(a,b,c){function d(a){b.Transport.apply(this,arguments)}a.websocket=d,b.util.inherit(d,b.Transport),d.prototype.name=\"websocket\",d.prototype.open=function(){var a=b.util.query(this.socket.options.query),d=this,e;return e||(e=c.MozWebSocket||c.WebSocket),this.websocket=new e(this.prepareUrl()+a),this.websocket.onopen=function(){d.onOpen(),d.socket.setBuffer(!1)},this.websocket.onmessage=function(a){d.onData(a.data)},this.websocket.onclose=function(){d.onClose(),d.socket.setBuffer(!0)},this.websocket.onerror=function(a){d.onError(a)},this},d.prototype.send=function(a){return this.websocket.send(a),this},d.prototype.payload=function(a){for(var b=0,c=a.length;b<c;b++)this.packet(a[b]);return this},d.prototype.close=function(){return this.websocket.close(),this},d.prototype.onError=function(a){this.socket.onError(a)},d.prototype.scheme=function(){return this.socket.options.secure?\"wss\":\"ws\"},d.check=function(){return\"WebSocket\"in c&&!(\"__addTask\"in WebSocket)||\"MozWebSocket\"in c},d.xdomainCheck=function(){return!0},b.transports.push(\"websocket\")}(\"undefined\"!=typeof io?io.Transport:module.exports,\"undefined\"!=typeof io?io:module.parent.exports,this),function(a,b,c){function d(a){if(!a)return;b.Transport.apply(this,arguments),this.sendBuffer=[]}function e(){}a.XHR=d,b.util.inherit(d,b.Transport),d.prototype.open=function(){return this.socket.setBuffer(!1),this.onOpen(),this.get(),this.setCloseTimeout(),this},d.prototype.payload=function(a){var c=[];for(var d=0,e=a.length;d<e;d++)c.push(b.parser.encodePacket(a[d]));this.send(b.parser.encodePayload(c))},d.prototype.send=function(a){return this.post(a),this},d.prototype.post=function(a){function d(){this.readyState==4&&(this.onreadystatechange=e,b.posting=!1,this.status==200?b.socket.setBuffer(!1):b.onClose())}function f(){this.onload=e,b.socket.setBuffer(!1)}var b=this;this.socket.setBuffer(!0),this.sendXHR=this.request(\"POST\"),c.XDomainRequest&&this.sendXHR instanceof XDomainRequest?this.sendXHR.onload=this.sendXHR.onerror=f:this.sendXHR.onreadystatechange=d,this.sendXHR.send(a)},d.prototype.close=function(){return this.onClose(),this},d.prototype.request=function(a){var c=b.util.request(this.socket.isXDomain()),d=b.util.query(this.socket.options.query,\"t=\"+ +(new Date));c.open(a||\"GET\",this.prepareUrl()+d,!0);if(a==\"POST\")try{c.setRequestHeader?c.setRequestHeader(\"Content-type\",\"text/plain;charset=UTF-8\"):c.contentType=\"text/plain\"}catch(e){}return c},d.prototype.scheme=function(){return this.socket.options.secure?\"https\":\"http\"},d.check=function(a,d){try{var e=b.util.request(d),f=c.XDomainRequest&&e instanceof XDomainRequest,g=a&&a.options&&a.options.secure?\"https:\":\"http:\",h=g!=c.location.protocol;if(e&&(!f||!h))return!0}catch(i){}return!1},d.xdomainCheck=function(){return d.check(null,!0)}}(\"undefined\"!=typeof io?io.Transport:module.exports,\"undefined\"!=typeof io?io:module.parent.exports,this),function(a,b){function c(a){b.Transport.XHR.apply(this,arguments)}a.htmlfile=c,b.util.inherit(c,b.Transport.XHR),c.prototype.name=\"htmlfile\",c.prototype.get=function(){this.doc=new(window[[\"Active\"].concat(\"Object\").join(\"X\")])(\"htmlfile\"),this.doc.open(),this.doc.write(\"<html></html>\"),this.doc.close(),this.doc.parentWindow.s=this;var a=this.doc.createElement(\"div\");a.className=\"socketio\",this.doc.body.appendChild(a),this.iframe=this.doc.createElement(\"iframe\"),a.appendChild(this.iframe);var c=this,d=b.util.query(this.socket.options.query,\"t=\"+ +(new Date));this.iframe.src=this.prepareUrl()+d,b.util.on(window,\"unload\",function(){c.destroy()})},c.prototype._=function(a,b){this.onData(a);try{var c=b.getElementsByTagName(\"script\")[0];c.parentNode.removeChild(c)}catch(d){}},c.prototype.destroy=function(){if(this.iframe){try{this.iframe.src=\"about:blank\"}catch(a){}this.doc=null,this.iframe.parentNode.removeChild(this.iframe),this.iframe=null,CollectGarbage()}},c.prototype.close=function(){return this.destroy(),b.Transport.XHR.prototype.close.call(this)},c.check=function(){if(typeof window!=\"undefined\"&&[\"Active\"].concat(\"Object\").join(\"X\")in window)try{var a=new(window[[\"Active\"].concat(\"Object\").join(\"X\")])(\"htmlfile\");return a&&b.Transport.XHR.check()}catch(c){}return!1},c.xdomainCheck=function(){return!1},b.transports.push(\"htmlfile\")}(\"undefined\"!=typeof io?io.Transport:module.exports,\"undefined\"!=typeof io?io:module.parent.exports),function(a,b,c){function d(){b.Transport.XHR.apply(this,arguments)}function e(){}a[\"xhr-polling\"]=d,b.util.inherit(d,b.Transport.XHR),b.util.merge(d,b.Transport.XHR),d.prototype.name=\"xhr-polling\",d.prototype.open=function(){var a=this;return b.Transport.XHR.prototype.open.call(a),!1},d.prototype.get=function(){function b(){this.readyState==4&&(this.onreadystatechange=e,this.status==200?(a.onData(this.responseText),a.get()):a.onClose())}function d(){this.onload=e,this.onerror=e,a.onData(this.responseText),a.get()}function f(){a.onClose()}if(!this.open)return;var a=this;this.xhr=this.request(),c.XDomainRequest&&this.xhr instanceof XDomainRequest?(this.xhr.onload=d,this.xhr.onerror=f):this.xhr.onreadystatechange=b,this.xhr.send(null)},d.prototype.onClose=function(){b.Transport.XHR.prototype.onClose.call(this);if(this.xhr){this.xhr.onreadystatechange=this.xhr.onload=this.xhr.onerror=e;try{this.xhr.abort()}catch(a){}this.xhr=null}},d.prototype.ready=function(a,c){var d=this;b.util.defer(function(){c.call(d)})},b.transports.push(\"xhr-polling\")}(\"undefined\"!=typeof io?io.Transport:module.exports,\"undefined\"!=typeof io?io:module.parent.exports,this),function(a,b,c){function e(a){b.Transport[\"xhr-polling\"].apply(this,arguments),this.index=b.j.length;var c=this;b.j.push(function(a){c._(a)})}var d=c.document&&\"MozAppearance\"in c.document.documentElement.style;a[\"jsonp-polling\"]=e,b.util.inherit(e,b.Transport[\"xhr-polling\"]),e.prototype.name=\"jsonp-polling\",e.prototype.post=function(a){function i(){j(),c.socket.setBuffer(!1)}function j(){c.iframe&&c.form.removeChild(c.iframe);try{h=document.createElement('<iframe name=\"'+c.iframeId+'\">')}catch(a){h=document.createElement(\"iframe\"),h.name=c.iframeId}h.id=c.iframeId,c.form.appendChild(h),c.iframe=h}var c=this,d=b.util.query(this.socket.options.query,\"t=\"+ +(new Date)+\"&i=\"+this.index);if(!this.form){var e=document.createElement(\"form\"),f=document.createElement(\"textarea\"),g=this.iframeId=\"socketio_iframe_\"+this.index,h;e.className=\"socketio\",e.style.position=\"absolute\",e.style.top=\"0px\",e.style.left=\"0px\",e.style.display=\"none\",e.target=g,e.method=\"POST\",e.setAttribute(\"accept-charset\",\"utf-8\"),f.name=\"d\",e.appendChild(f),document.body.appendChild(e),this.form=e,this.area=f}this.form.action=this.prepareUrl()+d,j(),this.area.value=b.JSON.stringify(a);try{this.form.submit()}catch(k){}this.iframe.attachEvent?h.onreadystatechange=function(){c.iframe.readyState==\"complete\"&&i()}:this.iframe.onload=i,this.socket.setBuffer(!0)},e.prototype.get=function(){var a=this,c=document.createElement(\"script\"),e=b.util.query(this.socket.options.query,\"t=\"+ +(new Date)+\"&i=\"+this.index);this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),c.async=!0,c.src=this.prepareUrl()+e,c.onerror=function(){a.onClose()};var f=document.getElementsByTagName(\"script\")[0];f.parentNode.insertBefore(c,f),this.script=c,d&&setTimeout(function(){var a=document.createElement(\"iframe\");document.body.appendChild(a),document.body.removeChild(a)},100)},e.prototype._=function(a){return this.onData(a),this.open&&this.get(),this},e.prototype.ready=function(a,c){var e=this;if(!d)return c.call(this);b.util.load(function(){c.call(e)})},e.check=function(){return\"document\"in c},e.xdomainCheck=function(){return!0},b.transports.push(\"jsonp-polling\")}(\"undefined\"!=typeof io?io.Transport:module.exports,\"undefined\"!=typeof io?io:module.parent.exports,this);\n\n/* Adapted from http://www.quirksmode.org/js/xmlhttp.html */\r\n\r\n/*jshint undef:true, browser: true*/\r\n/*global ActiveXObject:false, console:false */\r\n\r\n(function() {\r\n\r\nfunction parseBody(req) {\r\n  var header = req.getResponseHeader('Content-Type');\r\n  if (header === \"application/json\" && req.responseText) {\r\n    try {\r\n      return JSON.parse(req.responseText);\r\n    } catch (ex) {\r\n      console.error(\"Failed to parse \\\"\" + req.responseText + \"\\\" as JSON\", ex);\r\n      return req.responseText;\r\n    }\r\n  } else {\r\n    return req.responseText;  \r\n  }\r\n  \r\n}\r\n\r\nfunction sendRequest(url,options) {\r\n  var req = createXMLHTTPObject();\r\n  if (!req) return Error(\"AJAX is somehow not supported\");\r\n\r\n  if (options.query) url += '?' + options.query;\r\n\r\n  var data = options.data;\r\n  var method = options.method || \"GET\";\r\n  req.open(method,url,true);\r\n  req.withCredentials = true;\r\n  // req.setRequestHeader('User-Agent','XMLHTTP/1.0');\r\n  if (data)\r\n    req.setRequestHeader('Content-type', options.contentType || 'application/json');\r\n  if (typeof sendRequest.headers === 'object') {\r\n    for (var k in sendRequest.headers) {\r\n      if (sendRequest.headers.hasOwnProperty(k)) {\r\n        req.setRequestHeader(k, sendRequest.headers[k]);  \r\n      }\r\n    }\r\n  }\r\n  req.onreadystatechange = function () {\r\n    if (req.readyState != 4) return;\r\n    if (req.status != 200 && req.status != 204 && req.status != 304) {\r\n      if (typeof options.error === 'function') options.error(parseBody(req));\r\n      return;\r\n    }\r\n    if (typeof options.success === 'function') options.success(parseBody(req));\r\n  };\r\n  if (req.readyState == 4) return;\r\n  req.send(data);\r\n}\r\n\r\nsendRequest.headers = {};\r\n\r\nvar XMLHttpFactories = [\r\n  function () {return new XMLHttpRequest()},\r\n  function () {return new ActiveXObject(\"Msxml2.XMLHTTP\")},\r\n  function () {return new ActiveXObject(\"Msxml3.XMLHTTP\")},\r\n  function () {return new ActiveXObject(\"Microsoft.XMLHTTP\")},\r\n  function () {return new XDomainRequest()}\r\n];\r\n\r\nfunction createXMLHTTPObject() {\r\n  var xmlhttp = false;\r\n  for (var i=0;i<XMLHttpFactories.length;i++) {\r\n    try {\r\n      xmlhttp = XMLHttpFactories[i]();\r\n    }\r\n    catch (e) {\r\n      continue;\r\n    }\r\n    break;\r\n  }\r\n  return xmlhttp;\r\n}\r\n\r\nif (!window._dpd) window._dpd = {};\r\nwindow._dpd.ajax = sendRequest;\r\n\r\n})();\n\n(function (undefined) {\r\n\r\n  if (!window._dpd) window._dpd = {};\r\n\r\n  var root = window.location.origin;\r\n\r\n  var consoleLog = (typeof console !== 'undefined') && console.log;\r\n\r\n  // initial socket connection\r\n  var socket = io.connect(root);\r\n\r\n  var BASE_URL = '/';\r\n\r\n  function normalizeArray(parts, allowAboveRoot) {\r\n    // if the path tries to go above the root, `up` ends up > 0\r\n    var up = 0;\r\n    for (var i = parts.length - 1; i >= 0; i--) {\r\n      var last = parts[i];\r\n      if (last == '.') {\r\n        parts.splice(i, 1);\r\n      } else if (last === '..') {\r\n        parts.splice(i, 1);\r\n        up++;\r\n      } else if (up) {\r\n        parts.splice(i, 1);\r\n        up--;\r\n      }\r\n    }\r\n\r\n    // if the path is allowed to go above the root, restore leading ..\r\n    if (allowAboveRoot) {\r\n      for (; up--; up) {\r\n        parts.unshift('..');\r\n      }\r\n    }\r\n\r\n    return parts;\r\n  }\r\n\r\n  function filterArray(list, fn) {\r\n    if (Array.prototype.filter) return Array.prototype.filter.call(list, fn);\r\n    var newList = [];\r\n    for (var i = 0; i < list.length; i++) {\r\n      if (fn(list[i])) {\r\n        newList.push(list[i]);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  function joinPath() {\r\n    var paths = Array.prototype.slice.call(arguments, 0);\r\n    paths = paths.join('/').split('/');\r\n    return '/' + filterArray(paths, function(p, index) {\r\n      return p && typeof p === 'string';\r\n    }).join('/');\r\n  }\r\n\r\n  function isComplex(obj) {\r\n    if (obj) {\r\n      for (var k in obj) {\r\n        if (obj.hasOwnProperty(k)) {\r\n          if (typeof obj[k] !== 'string') {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function createQueryString(query) {\r\n    var parts = [];\r\n    for (var k in query) {\r\n      if (query.hasOwnProperty(k)) {\r\n        parts.push(encodeURIComponent(k) + \"=\" + encodeURIComponent(query[k]));  \r\n      }\r\n    }\r\n    return parts.join('&');\r\n  }\r\n\r\n  function encodeIfComplex(query) {\r\n    if (isComplex(query)) {\r\n      return encodeURI(JSON.stringify(query));\r\n    } else if (query) {\r\n      return createQueryString(query);\r\n    }\r\n  }\r\n\r\n  function returnSuccess(fn) {\r\n    return function(data) {\r\n      if (fn === consoleLog) return console.log(data);\r\n      if (typeof fn === 'function') fn(data);\r\n    };\r\n  }\r\n\r\n  function returnError(fn) {\r\n    return function(data) {\r\n      if (fn === consoleLog) return console.error(data);\r\n      if (typeof fn === 'function') fn(null, data);\r\n    };\r\n  }\r\n\r\n  var baseMethods = {\r\n    get: function(options, fn) {\r\n      var query = encodeIfComplex(options.query);\r\n\r\n      return _dpd.ajax(root + joinPath(BASE_URL, options.path), {\r\n          method: \"GET\"\r\n        , query: query\r\n        , success: returnSuccess(fn)\r\n        , error: returnError(fn)\r\n      });\r\n    }\r\n    , del: function(options, fn) {\r\n      var query = encodeIfComplex(options.query);\r\n\r\n      return _dpd.ajax(root + joinPath(BASE_URL, options.path), {\r\n          method: \"DELETE\"\r\n        , query: query\r\n        , success: returnSuccess(fn)\r\n        , error: returnError(fn)\r\n      });\r\n    }\r\n    , requestWithBody: function(method, options, fn) {\r\n      var query = encodeIfComplex(options.query);\r\n      if (query) query = '?' + query;\r\n      else query = '';\r\n\r\n      return _dpd.ajax(root + joinPath(BASE_URL, options.path) + query, {\r\n          method: method\r\n        , contentType: options.body && \"application/json\"\r\n        , data: JSON.stringify(options.body || {}) || \"{}\"\r\n        , success: returnSuccess(fn)\r\n        , error: returnError(fn)\r\n      });\r\n    }\r\n  };\r\n\r\n  baseMethods.post = function(options, fn) {\r\n    return baseMethods.requestWithBody(\"POST\", options, fn);\r\n  };\r\n\r\n  baseMethods.put = function(options, fn) {\r\n    return baseMethods.requestWithBody(\"PUT\", options, fn);\r\n  };\r\n\r\n  function isString(arg) {\r\n    return typeof arg === 'string' || typeof arg === 'number';\r\n  }\r\n\r\n  function toString(arg) {\r\n    return arg ? arg.toString() : null;\r\n  }\r\n\r\n  function parseGetSignature(args) {\r\n    var settings = {}\r\n      , i = 0;\r\n\r\n    // path/func\r\n    if (isString(args[i]) || !args[i]) {\r\n      settings.path = toString(args[i]);\r\n      i++;\r\n    }\r\n\r\n    // join path to func\r\n    if (isString(args[i])  || !args[i]) {\r\n      settings.path = joinPath(settings.path, toString(args[i]));\r\n      i++;\r\n    }\r\n\r\n    // query\r\n    if (args[i] !== consoleLog && typeof args[i] === 'object' || !args[i]) { // IE considers console.log to be an object. \r\n      settings.query = args[i];\r\n      i++;\r\n    }\r\n\r\n    if (typeof args[i] === 'function' || args[i] === consoleLog) {\r\n      settings.fn = args[i];  \r\n    }\r\n\r\n    return settings;\r\n}\r\n\r\n  function parsePostSignature(args) {\r\n    var settings = {}\r\n      , i = 0;\r\n\r\n    //path\r\n    if (isString(args[i]) || !args[i]) {\r\n      settings.path = toString(args[i]);\r\n      i++;\r\n    }\r\n\r\n    // body\r\n    if (args[i] !== consoleLog && typeof args[i] === 'object' || !args[i]) {\r\n      settings.body = args[i];\r\n      i++;\r\n    }\r\n\r\n    // query - if this exists the LAST obj was query and the new one is body\r\n    if (args[i] !== consoleLog && typeof args[i] === 'object') {\r\n      settings.query = settings.body;\r\n      settings.body = args[i];\r\n      i++;\r\n    }\r\n\r\n    if (typeof args[i] === 'function' || args[i] === consoleLog) {\r\n      settings.fn = args[i];  \r\n    }\r\n\r\n    return settings;\r\n  }\r\n\r\n  window.dpd = function(resource) {\r\n\r\n    var r = {\r\n      get: function(func, path, query, fn) {\r\n        var settings = parseGetSignature(arguments);\r\n        settings.path = joinPath(resource, settings.path);\r\n\r\n        return baseMethods.get(settings, settings.fn);\r\n      }\r\n      , post: function(path, query, body, fn) {\r\n        var settings = parsePostSignature(arguments);\r\n        settings.path = joinPath(resource, settings.path);\r\n\r\n        return baseMethods.post(settings, settings.fn);\r\n      }\r\n      , put: function(path, query, body, fn) {\r\n        var settings = parsePostSignature(arguments);\r\n        settings.path = joinPath(resource, settings.path);\r\n\r\n        return baseMethods.put(settings, settings.fn);\r\n      }, del: function(path, query, fn) {\r\n        var settings = parseGetSignature(arguments);\r\n        settings.path = joinPath(resource, settings.path);\r\n\r\n        return baseMethods.del(settings, settings.fn);\r\n      }\r\n    };\r\n\r\n    r.exec = function(func, path, body, fn) {\r\n      var settings = {}\r\n        , i = 0;\r\n\r\n      settings.func = arguments[i];\r\n      i++;\r\n\r\n      // path\r\n      if (isString(arguments[i])) {\r\n        settings.path = arguments[i];\r\n        i++;\r\n      }\r\n\r\n      // body\r\n      if (typeof arguments[i] === 'object') {\r\n        settings.body = arguments[i];\r\n        i++;\r\n      }\r\n\r\n      fn = arguments[i];\r\n\r\n      settings.path = joinPath(resource, settings.func, settings.path);\r\n      return baseMethods.post(settings, fn);\r\n    };\r\n\r\n    return r;\r\n  };\r\n\r\n  window.dpd.on = function() {\r\n    socket.on.apply(socket, arguments);\r\n  };\r\n\r\n  window.dpd.once = function(name, fn) {\r\n    var _fn = function() {\r\n      socket.removeListener(name, _fn);\r\n      fn.apply(this, arguments);\r\n    };\r\n    socket.on(name, _fn);\r\n  };\r\n\r\n  window.dpd.off = function(name, fn) {\r\n    if (fn == null) {\r\n      socket.removeAllListeners(name);\r\n    } else {\r\n      socket.removeListener(name, fn);\r\n    }\r\n  };\r\n\r\n  var isSocketReady = false;\r\n  window.dpd.once('connect', function() {\r\n    isSocketReady = true;\r\n  });\r\n\r\n  window.dpd.socketReady = function(fn) {\r\n    if (isSocketReady) {\r\n      setTimeout(fn, 0);\r\n    } else {\r\n      window.dpd.once('connect', fn);\r\n    }\r\n  };\r\n\r\n  window.dpd.socket = socket;\r\n\r\n\r\n})();",
                              "config" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][5][\"options\"][\"config\"]" },
                              "domain" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][3][\"domain\"]" },
                              "events" : {  },
                              "name" : "dpd.js",
                              "options" : { "config" : { "resources" : [ { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][0]" },
                                          { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][1]" },
                                          { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][2]" },
                                          { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][3]" }
                                        ] },
                                  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                                },
                              "path" : "/dpd.js"
                            },
                            { "_events" : null,
                              "_maxListeners" : 10,
                              "config" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][6][\"options\"][\"config\"]" },
                              "domain" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][3][\"domain\"]" },
                              "events" : {  },
                              "internal" : true,
                              "name" : "__resources",
                              "options" : { "config" : { "configPath" : "./" },
                                  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                                },
                              "path" : "/__resources",
                              "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][6][\"options\"]" }
                            },
                            { "_events" : null,
                              "_maxListeners" : 10,
                              "config" : {  },
                              "domain" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"][3][\"domain\"]" },
                              "events" : {  },
                              "internal" : true,
                              "name" : "dashboard",
                              "options" : { "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" } },
                              "path" : "/dashboard"
                            }
                          ],
                        "router" : { "resources" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"resources\"]" },
                            "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" }
                          },
                        "sessions" : { "_db" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"db\"]" },
                            "namespace" : "sessions",
                            "socketIndex" : {  },
                            "socketQueue" : { "_events" : {  },
                                "_maxListeners" : 10,
                                "domain" : null
                              },
                            "sockets" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"]" }
                          },
                        "sockets" : { "_events" : { "connection" : [ null,
                                    null
                                  ] },
                            "auth" : false,
                            "flags" : { "endpoint" : "",
                                "exceptions" : [  ]
                              },
                            "manager" : { "_events" : { "set:transports" : [ null,
                                        null
                                      ] },
                                "closed" : {  },
                                "connected" : {  },
                                "gc" : { "domain" : { "_events" : {  },
                                        "_maxListeners" : 10,
                                        "domain" : null,
                                        "members" : [  ]
                                      } },
                                "handshaken" : {  },
                                "namespaces" : { "" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"]" } },
                                "oldListeners" : [  ],
                                "open" : {  },
                                "roomClients" : {  },
                                "rooms" : {  },
                                "sequenceNumber" : -549019176,
                                "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" },
                                "settings" : { "authorization" : false,
                                    "blacklist" : [ "disconnect" ],
                                    "browser client cache" : true,
                                    "browser client etag" : false,
                                    "browser client expires" : 315360000,
                                    "browser client gzip" : false,
                                    "browser client handler" : false,
                                    "browser client minification" : false,
                                    "browser client" : true,
                                    "client store expiration" : 15,
                                    "close timeout" : 60,
                                    "destroy buffer size" : 100000000,
                                    "destroy upgrade" : true,
                                    "flash policy port" : 10843,
                                    "flash policy server" : true,
                                    "heartbeat interval" : 25,
                                    "heartbeat timeout" : 60,
                                    "heartbeats" : true,
                                    "log colors" : true,
                                    "log level" : 0,
                                    "log" : true,
                                    "logger" : { "colors" : true,
                                        "enabled" : true,
                                        "level" : -1
                                      },
                                    "match origin protocol" : false,
                                    "origins" : "*:*",
                                    "polling duration" : 20,
                                    "resource" : "/socket.io",
                                    "static" : { "cache" : {  },
                                        "manager" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"][\"manager\"]" },
                                        "paths" : { "/socket.io+" : { "mime" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"][\"manager\"][\"settings\"][\"static\"][\"paths\"][\"/socket.io.js\"][\"mime\"]" } },
                                            "/socket.io.js" : { "mime" : { "encoding" : "utf8",
                                                    "gzip" : true,
                                                    "type" : "application/javascript"
                                                  } },
                                            "/socket.io.v" : { "mime" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"][\"manager\"][\"settings\"][\"static\"][\"paths\"][\"/socket.io.js\"][\"mime\"]" } },
                                            "/static/flashsocket/WebSocketMain.swf" : { "file" : "C:\\Program Files (x86)\\Deployd\\node_modules\\deployd\\node_modules\\socket.io\\node_modules\\socket.io-client\\lib/../dist/WebSocketMain.swf",
                                                "mime" : { "encoding" : "binary",
                                                    "gzip" : false,
                                                    "type" : "application/x-shockwave-flash"
                                                  }
                                              },
                                            "/static/flashsocket/WebSocketMainInsecure.swf" : { "file" : "C:\\Program Files (x86)\\Deployd\\node_modules\\deployd\\node_modules\\socket.io\\node_modules\\socket.io-client\\lib/../dist/WebSocketMainInsecure.swf",
                                                "mime" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"][\"manager\"][\"settings\"][\"static\"][\"paths\"][\"/static/flashsocket/WebSocketMain.swf\"][\"mime\"]" }
                                              }
                                          }
                                      },
                                    "store" : { "clients" : {  },
                                        "manager" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"][\"manager\"]" }
                                      },
                                    "transports" : [ "websocket",
                                        "htmlfile",
                                        "xhr-polling",
                                        "jsonp-polling"
                                      ]
                                  },
                                "sockets" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sockets\"]" }
                              },
                            "name" : "",
                            "sockets" : {  }
                          },
                        "stores" : {  }
                      },
                    "writable" : true
                  },
                "useChunkedEncodingByDefault" : true,
                "writable" : true
              }
            ]
        },
      "headers" : { "accept" : "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
          "accept-encoding" : "gzip,deflate,sdch",
          "accept-language" : "en-US,en;q=0.8",
          "cache-control" : "max-age=0",
          "connection" : "keep-alive",
          "cookie" : "laravel_auth_drivers_eloquent_remember=6fd2af6226a23cc275415943fd875a2aa2ad1042%2BKLTGc9GYLImi8abk3RfiiWxBwow5M5R2Ga3QU3HnJHJsOXiBGAEn7ZzXHCumCsJBg4jTAe5EjnHGZPLij9Y6%2FRmg07M5xnudfs4hdDzGd4EkzeFYfa%2BkkkUoeerDLgmM; remember_82e5d2c56bdd0811318f0cf078b78bfc=eyJpdiI6IlNtNjFVNFAwUUZDQWQrelRoV2toYzNqeGl2eGVHUzc1enl4SGxjK1QyVzQ9IiwidmFsdWUiOiJlM041cktza1RJRVRNYVdsTjZPQTN6TE96Mmg5Tm1pbGdzWlV4dXRIcUJNPSIsIm1hYyI6IjgyMWNiNmI1ZTRlOGE4NWY1NjVhNzM4ZmVhYmZkMGM4ZGVhNzE4ZDJlNmE1MjJlNjlhZmM4MmY3NGVhMzhhYjYifQ%3D%3D; sid=73488724a144623c6a8584defcf2da7258d8295785031689188f0c86d36da6fcdcc034166934efa2f12850b8890c1d47ee66d0710352d5a6a17ffc8e16fc49a2",
          "host" : "localhost:2403",
          "user-agent" : "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36"
        },
      "httpVersion" : "1.1",
      "httpVersionMajor" : 1,
      "httpVersionMinor" : 1,
      "method" : "GET",
      "readable" : false,
      "session" : { "data" : { "id" : "73488724a144623c6a8584defcf2da7258d8295785031689188f0c86d36da6fcdcc034166934efa2f12850b8890c1d47ee66d0710352d5a6a17ffc8e16fc49a2" },
          "isRoot" : false,
          "sid" : "73488724a144623c6a8584defcf2da7258d8295785031689188f0c86d36da6fcdcc034166934efa2f12850b8890c1d47ee66d0710352d5a6a17ffc8e16fc49a2",
          "socket" : {  },
          "store" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"sessions\"]" }
        },
      "socket" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"]" },
      "statusCode" : null,
      "trailers" : {  },
      "upgrade" : false,
      "url" : "/assets/"
    },
  "res" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1]" },
  "router" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"][\"router\"]" },
  "server" : { "$ref" : "$[\"req\"][\"domain\"][\"members\"][1][\"socket\"][\"server\"]" },
  "session" : { "$ref" : "$[\"req\"][\"session\"]" },
  "timestamp" : "2013-07-14T22:21:57.719Z",
  "url" : "/"
};